package dev.log.trace;

import java.util.ArrayList;

import dev.log.activity.ComponentVector;
import dev.log.activity.Matrix;

/**
 * Staccato algorithm described by Rui Abreu and Arjan J.C. van Gemund
 * for finding a minimal hitting set.
 * 
 * Since it is said that at lambda = 1.0 and l = 100 this algorithm gives a good
 * performance and a good result, we will use this here as the default values.
 * 
 * @author Joel van den Berg
 *
 */

public class Staccato {	

	/**
	 * The default value for lambda as defined in the paper by Abreu et al.
	 */
	static double lambda = 1.0;
	
	/**
	 * The default value for l as defined in the paper by Abreu et al.
	 */
	static int l = 100;
	
	/**
	 * Calculate the Minimal Hitting Sets for this matrix with default values for lambda and l.
	 * @param matrix An activity matrix
	 * @return A set of minimal hitting sets for the matrix
	 * @throws Exception when the strip operation doesn't work.
	 */
	static public ArrayList<ArrayList<String>> calculate(Matrix matrix) throws Exception{
		
		int m = matrix.getComponentCount();
		
		/**
		 * Count conflicting sets
		 */
		int Tf = 0;
		for(Integer i : matrix.getError().getValues()) {
			Tf += i;
		}	
		
		ArrayList<String> r = matrix.getRank();
		
		/**
		 * Initiate empty hit set set
		 */
		ArrayList<ArrayList<String>> d = new ArrayList<ArrayList<String>>();
		
		/**
		 * Initiate the part of the matrix we have seen
		 */
		double seen = 0.0;
		
		Matrix matrix_copy = matrix.copy();
		for(ComponentVector component : matrix_copy.getComponents()) {
			if (component.getCounts().get("n11") == Tf) {
				ArrayList<String> set = new ArrayList<String>();
				set.add(component.getHeader());
				d.add(0,set);
				/* Strip_Component(A,j) */
				matrix.removeComponent(component.getHeader());
				r.remove(component.getHeader());
				seen += (double)1/m;
			}
		}
		
		//System.out.println("Matrix after 5-12: " + matrix);
		int i = 0;
		while(!r.isEmpty() && seen <= lambda && d.size() <= l) {
//			System.out.println(r + " at iteration "+ i++);
			String j = r.remove(0);
			seen += (double)1/m;
//			System.out.println("componentcount "+m+" results in "+(double)1/m);
			Matrix new_matrix = matrix.copy();
			new_matrix.strip(j);
			Matrix copy_of_new_matrix = new_matrix.copy();
			ArrayList<ArrayList<String>> dprime = Staccato.calculate(new_matrix);
			//System.out.println("end recursion" + new_matrix);

//			Thread.sleep(1000);
			System.out.println("old matrix was " + matrix);
			System.out.println("new matrix is " + copy_of_new_matrix);
			System.out.println("component we want to add: "+j);
			System.out.println("adding to:                "+d);
			System.out.println("while d' is:              "+dprime);
			while(!dprime.isEmpty()) {
				ArrayList<String> jprime = dprime.remove(0);
				jprime.add(0,j);
				if(!isSubsumed(d,jprime)) {
					d.add(0,jprime);
//					System.out.println(d);
				}
			}
			System.out.println("we added to d " + d + " and now r is " + r);
		}

		System.out.println("d is " + d);
		return d;
	}

	/**
	 * Returns true if jprime contain all elements of an element in d.
	 * Take for example      d = [[1,2],[2,3,5],[1,6]]
	 * 					jprime = [1,2,3,4]
	 * Then this should return true, because [1,2] are in jprime.
	 * @param d
	 * @param jprime
	 * @return true when jprime is subsumed by d
	 */
	static public boolean isSubsumed(ArrayList<ArrayList<String>> d,
			ArrayList<String> jprime) {
//		System.out.println("Subsume check");
//		System.out.println("j' "+jprime);
//		System.out.println("d  "+d);
//		System.out.println("===============");
		for(ArrayList<String> item : d) {
			boolean subsumed = true;
			for(String c : item)
				if(!jprime.contains(c)) 
					/*
					 *  For this element, there is an element of it not in jprime, but 
					 *  there might still be an other element subsuming jprime
					 */
					subsumed = false;
			if(subsumed)
				/*
				 * At this point AN ELEMENT contain the elements in jprime, thus jprime is subsumed
				 */
				return true;
		}

		/* 
		 * At this point there was no element subsuming jprime
		 */
		return false;
	}

}
