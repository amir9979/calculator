package dev.log.trace;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class TraceStatePoint {

	private static final boolean USE_DATABASE = true;
	private static final String LOG_FILE = "trace_log.txt";
	private static final String DATABASE_NAME = "service_logging";
	private static final String TABLE_NAME = "trace_point";
	
	private String process_id;
	private String interface_id;
	private String invoker_id;
	private String service_id;
	private String sequence_id;
	
	private MySQLConnector connector;

	public TraceStatePoint(String process_id, String interface_id, String invoker_id, String service_id, String sequence_id) {
		this.process_id = process_id;
		this.interface_id = interface_id;
		this.invoker_id = invoker_id;
		this.service_id = service_id;
		this.sequence_id = sequence_id;

		connector = new MySQLConnector(DATABASE_NAME);
	}
	
	public static void init() {
		MySQLConnector connector = new MySQLConnector(DATABASE_NAME);
		
		connector.createTable("CREATE TABLE IF NOT EXISTS trace_point ("
	               + "id INT UNSIGNED NOT NULL AUTO_INCREMENT,"
	               + "PRIMARY KEY (id),"
	               + "process_id CHAR(40), interface_id CHAR(40), invoker_id CHAR(40), service_id CHAR(40), sequence_id CHAR(40))");
		
		connector.close();
	}
	
	public void log() {
		if(USE_DATABASE) 
			logToDatabase();
		else
			logToFile();
	}
	
	public void logToDatabase() {
		connector.update(String.format("INSERT INTO %s VALUES (0, '%s', '%s', '%s', '%s', '%s');",
				TABLE_NAME,
				process_id,
				interface_id,
				invoker_id,
				service_id,
				sequence_id));
	}
	
	public void logToFile() {
		try {
			FileWriter writer = new FileWriter(new File(LOG_FILE),true);
			PrintWriter out = new PrintWriter(writer);
			out.println(String.format("{\"process_id\":\"%s\",\"interface_id\":\"%s\",\"invoker_id\":\"%s\",\"service_id\":\"%s\",\"sequence_id\":\"%s\"}",
					process_id,interface_id,invoker_id,service_id,sequence_id));
			out.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static String getSequence(String processId) {

		if(USE_DATABASE) {
			MySQLConnector connector = new MySQLConnector(DATABASE_NAME);
		} else {
			try {
				FileReader reader = new FileReader("trace_sequence_"+processId+".txt");
				char[] counter = new char[10];
				int read = reader.read();
				int i = 0;
				while(read != -1) {
					counter[i] = (char)read;
					i++;
					read = reader.read();
				}
				return String.valueOf(counter,0,i);
			} catch (FileNotFoundException e){
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return "";
	}

	public static void increaseSequence(String processId) {
		
		if(USE_DATABASE) {
			
		} else {
			try {
				String sequenceId = getSequence(processId);
				FileWriter writer = new FileWriter("trace_sequence_"+processId+".txt");
				PrintWriter out = new PrintWriter(writer);
				out.print(Integer.parseInt(sequenceId) + 1);
				out.flush();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
	}

	public static void initiateSequence(String processId) {
		
		if(USE_DATABASE) {

		} else {
			try {
				FileWriter writer = new FileWriter("trace_sequence_"+processId+".txt");
				PrintWriter out = new PrintWriter(writer);
				out.print(0);
				out.flush();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
