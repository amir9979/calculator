package dev.log.handler;

import java.util.Arrays;

import org.ebayopensource.turmeric.runtime.common.exceptions.ServiceException;
import org.ebayopensource.turmeric.runtime.common.impl.handlers.BaseHandler;
import org.ebayopensource.turmeric.runtime.common.pipeline.InboundMessage;
import org.ebayopensource.turmeric.runtime.common.pipeline.Message;
import org.ebayopensource.turmeric.runtime.common.pipeline.MessageContext;

import dev.log.trace.TraceStatePoint;

public class RequestLogHeaderHandler extends BaseHandler {

	public static final String PROCESS_ID = "LOG-PROCESS-ID";
	public static final String SEQUENCE_ID = "LOG-SEQUENCE-ID";
	
	private final boolean debug = false;
	private final boolean easytoread = true;	
	
	private String service_id;
	
	private int requestCount = 0;
	
	public void init(InitContext ctx) throws ServiceException {
		if(ctx.getServiceId().getNamespace() != null) {
			String namespace = ctx.getServiceId().getNamespace().split("//")[1];
			if(!easytoread)
				service_id = namespace + "_" + ctx.getServiceId().getAdminName();
			else 
				service_id = ctx.getServiceId().getAdminName();
		}else {
			service_id = ctx.getServiceId().getAdminName();
		}
	}
	
	@Override
	public void invoke(MessageContext ctx) throws ServiceException {

		if(debug)System.out.println(ctx.getServiceId().getAdminName() + " RequestLogHeaderHandler for "+ctx.getRequestMessage());
		

		Message requestMsg = ctx.getRequestMessage();
		String processId = requestMsg.getTransportHeader(PROCESS_ID);
		
		/**
		 * Handle an incoming request
		 */
		if(requestMsg instanceof InboundMessage) {
			
			if(debug)System.out.println("Handling incoming message:");
			if(debug)System.out.println(processId);
			
			/**
			 * The request doesn't contain headers
			 */
			if(processId == null) {
				/**
				 * Initialize the request chain at this service
				 */
				processId = service_id + "_" + increaseRequestCount();
				TraceStatePoint.initiateSequence(processId);
			}

			requestMsg.setTransportHeader(PROCESS_ID, processId);

			logIncomingMessage(ctx);
		}
		
		/**
		 * Handle an outgoing request
		 */
		else {
			if(debug)System.out.println("Handling outgoing message:");
			TraceStatePoint.increaseSequence(processId);
			System.out.println(String.format("From:%s\nTo:%s",service_id,ctx.getOperationName()));
		}
		
		if(debug)System.out.println("END OF REQUESTLOGHEADERHANDLER");
	}
	
	private void logIncomingMessage(MessageContext ctx) throws ServiceException {
		Message requestMsg = ctx.getRequestMessage();
		String process_id = requestMsg.getTransportHeader(PROCESS_ID);
		
		String interface_id;
		String service_id;

		if(!easytoread) {
			interface_id = ctx.getOperationName() + "_" + ctx.getRequestMessage().getParam(0);
			service_id = ctx.getServiceAddress().getServiceLocationUrl() + "@" + this.service_id;
		}
		else {
			interface_id = ctx.getOperationName();
			service_id = this.service_id;
		}
		
		String sequence_id = TraceStatePoint.getSequence(process_id);
		String from_service_id = "";
		TraceStatePoint point = new TraceStatePoint(process_id, interface_id, from_service_id, service_id, sequence_id);
		point.logToFile();
		
	}

	private int increaseRequestCount(){
		requestCount++;
		return requestCount;
	}

}
