package dev.log.handler;

import org.ebayopensource.turmeric.runtime.common.exceptions.ServiceException;
import org.ebayopensource.turmeric.runtime.common.impl.handlers.BaseHandler;
import org.ebayopensource.turmeric.runtime.common.pipeline.InboundMessage;
import org.ebayopensource.turmeric.runtime.common.pipeline.Message;
import org.ebayopensource.turmeric.runtime.common.pipeline.MessageContext;

import dev.log.trace.TraceStatePoint;

public class RequestLogHeaderHandler extends BaseHandler {

	public static final String PROCESS_ID = "LOG-PROCESS-ID";
	public static final String SEQUENCE_ID = "LOG-SEQUENCE-ID";
	
	private final boolean debug = false;
	private String service_id;
	
	private int requestCount = 0;
	
	public void init(InitContext ctx) throws ServiceException {
		service_id = ctx.getServiceId().getNamespace() + "_" + ctx.getServiceId().getAdminName();
	}
	
	@Override
	public void invoke(MessageContext ctx) throws ServiceException {

		if(debug)System.out.println(ctx.getServiceId().getAdminName() + " RequestLogHeaderHandler for "+ctx.getRequestMessage());
		
		/**
		 * Handle an incoming request
		 */
		if(ctx.getRequestMessage() instanceof InboundMessage) {
			
			Message requestMsg = ctx.getRequestMessage();
			
			String processId = requestMsg.getTransportHeader(PROCESS_ID);
			String sequenceId = requestMsg.getTransportHeader(SEQUENCE_ID);
			if(debug)System.out.println("Handling incoming message:");
			if(debug)System.out.println(processId);
			if(debug)System.out.println(sequenceId);
			
			/**
			 * The request doesn't contain headers
			 */
			if(processId == null) {
				/**
				 * Initialize the request chain at this service
				 */
				processId = service_id + "_" + increaseRequestCount();
				sequenceId = "0";
			}

			requestMsg.setTransportHeader(PROCESS_ID, processId);

			logIncomingMessage(ctx);
		}
		
		/**
		 * Handle an outgoing request
		 */
		else {
			/**
			 * Get the values for the headers
			 */
			if(debug)System.out.println("Handling outgoing message:");
			String requestId = ctx.getRequestMessage().getTransportHeader(PROCESS_ID);
			String sequenceId = ctx.getRequestMessage().getTransportHeader(SEQUENCE_ID);
			sequenceId = "" + (Integer.parseInt(sequenceId) + 1);
			
			ctx.getResponseMessage().setTransportHeader(SEQUENCE_ID, sequenceId);
			ctx.getRequestMessage().setTransportHeader(SEQUENCE_ID, sequenceId);
			
//			MessageContext context = MessageContextAccessorImpl.getContext();
//			String requestId = "";
//			int sequenceId = 0;
//			ctx.getRequestMessage().setTransportHeader(REQUEST_ID, requestId);
//			ctx.getRequestMessage().setTransportHeader(SEQUENCE_ID, ""+sequenceId);
		}
		if(debug)System.out.println("END OF REQUESTLOGHEADERHANDLER");
	}
	
	private void logIncomingMessage(MessageContext ctx) throws ServiceException {
		Message requestMsg = ctx.getRequestMessage();
		String process_id = requestMsg.getTransportHeader(PROCESS_ID);
		String interface_id = ctx.getOperationName() + "_" + ctx.getRequestMessage().getParam(0);
		String sequence_id = TraceStatePoint.getSequenceId(process_id);
		TraceStatePoint point = new TraceStatePoint(process_id, interface_id, ctx.getServiceAddress().getServiceLocationUrl() + "@" + service_id, sequence_id);
		point.logToFile();
		
	}

	private int increaseRequestCount(){
		requestCount++;
		return requestCount;
	}

}
