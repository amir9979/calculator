package dev.log.mhs;

import java.util.ArrayList;

import dev.log.activity.Matrix;
import dev.log.trace.Staccato;
import edu.emory.mathcs.backport.java.util.Collections;

public class IncrementalMHS {

	ArrayList<HittingSet> hittingsets = new ArrayList<HittingSet>();
	
	public void addExecution(ArrayList<String> execution, Integer error) {
		if(error == 1) {
			if(hittingsets.isEmpty()) {// no errors occured yet
				for(String c : execution) {
					HittingSet set = new HittingSet();
					set.addComponent(c);
					hittingsets.add(set);
				}
			} else {
				/* check if there are sets that can't explain this set */
				ArrayList<HittingSet> toAdd = new ArrayList<HittingSet>();
				ArrayList<HittingSet> toRemove = new ArrayList<HittingSet>();
				
				for(HittingSet hitset : hittingsets) {
					if(!hitset.containsAnyComponent(execution)) {
						toRemove.add(hitset);
					}
				}
				hittingsets.removeAll(toRemove);

				for(HittingSet hitset : toRemove) {
					for(String c : execution) {
						HittingSet copy = hitset.copy();
						copy.addComponent(c);
						if(!this.subsumedByHittingSets(copy))
							toAdd.add(copy);
					}
				}
				hittingsets.addAll(toAdd);
			}
//			System.out.println("new hittingsets " + hittingsets);
		}
	}
	
	/**
	 * If set contains all elements of an element in sets, it is subsumed by sets.
	 * 
	 * @param set the hitset that is checked to be subsumed
	 * @param sets the list of hittingsets that may subsume set
	 * @return true when set is subsumed by sets; false otherwise
	 */
	public boolean subsumedByHittingSets(HittingSet set) {
		for(HittingSet hitset : this.hittingsets) {
			boolean subsumed = true;
			
			subsumed = hitset.containsAllComponents(set);
			
			if(subsumed)
				return true;
		}
		return false;
	}
	
	/**
	 * More human readable representation of the minimum-size hitting set
	 * @return human readable string
	 */
	@Override
	public String toString() {
		return this.hittingsets.toString();
	}

}
