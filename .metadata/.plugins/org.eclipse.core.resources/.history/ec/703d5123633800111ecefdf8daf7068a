package dev.log.activity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.SortedMap;
import java.util.TreeMap;

/**
 * The activity matrix is used for calculating the Minimal Hitting Set
 * and BARINEL, an algorithm that returns the order of most likely faulty
 * components that lead to failures in the system.
 *  
 * First a matrix is made and different executions are added. After these
 * executions are added, the BARINEL algorithm can be performed.
 * 
 * @author Joel van den Berg
 *
 */
public class Matrix {

	/**
	 * The list of components.
	 */
	private ArrayList<ComponentVector> components = new ArrayList<ComponentVector>();
	private ErrorVector error = new ErrorVector();
	
	/**
	 * An empty constructor for initializing an activity matrix. After initiation the
	 * executions can be added with {@link Matrix#addExecution()}.
	 */
	public Matrix() {
		
	}
	
	/**
	 * Add an execution to this activity matrix. If a component has a header that occurs
	 * in the headers argument it will get a value of 1 added to its values (it is hit)
	 * else it will have a 0 added to its values.
	 * 
	 * If a header can't be found in the list of components, then this component will
	 * be initialized with 0 for each hit and the current error vector will be used
	 * for determining the counts of the vector. Finally a 1 will be added to the 
	 * component's values.
	 * 
	 * @param values The value of each component (1 = hit, 0 = miss)
	 * @param error The error that will be added to the error vector
	 */
	public void addExecution(ArrayList<String> headers, Integer error) {
		for(ComponentVector vector : components) {
			if(headers.contains(vector.getHeader()))
				vector.insertHit(1, error);
			else
				vector.insertHit(0, error);
		}
		ArrayList<String> componentHeaders = this.getComponentHeaders();
		for(String header : headers){
			if(!componentHeaders.contains(header)) {
				ComponentVector newVector = new ComponentVector();
				newVector.setHeader(header);
				int i = 0;
				while(i < this.error.getValues().size()) {
					newVector.insertHit(0, this.error.getValue(i));
					i++;
				}
				newVector.insertHit(1, error);
				this.components.add(newVector);
			}
		}
		this.error.addValue(error);
	}
	
	/**
	 * Initiate an activity matrix with some components and an error vector.
	 * @param components
	 * @param error_vector
	 */
	public Matrix(ArrayList<ComponentVector> components, ErrorVector error_vector) {
		this.components = components;
		this.error = error_vector;
	}
	
	/**
	 * Make a deep copy of this matrix. It creates new components (by copying)
	 * and a new error vector (by copying) and then returns it.
	 * @return The deep copy of the matrix
	 */
	public Matrix copy() {
		Matrix new_matrix = new Matrix();
		
		for(ComponentVector component : components) {
			ComponentVector new_component = component.copy();
			new_matrix.addComponent(new_component);
		}
		
		ErrorVector new_error = error.copy();
		new_matrix.setError(new_error);

		return new_matrix;
	}
	
	/**
	 * Add a component to this matrix
	 * @param component The component to be added
	 */
	public void addComponent(ComponentVector component) {
		components.add(component);
	}
	
	/**
	 * This will overwrite the current error vector with the given error vector
	 * @param error The new error vector
	 */
	public void setError(ErrorVector error) {
		this.error = error;
	}
	
	/**
	 * Get the error vector of this matrix
	 * @return The error vector of this matrix
	 */
	public ErrorVector getError() {
		return this.error;
	}

	/**
	 * Removes component j from the ActivityMatrix and also removes the rows
	 * where the component is hit and the error_vector contains a 1 on that
	 * position.
	 * @param j String representing the component
	 * @throws Exception from removeVector(Object)
	 * @see {@link Matrix#removeComponent(Object)};
	 */
	public void strip(String header) throws Exception {
		ComponentVector removed_column = this.removeComponent(header);

		for(int i = removed_column.getValues().size()-1; i >= 0; i--) {
			if((int)removed_column.getValue(i) == 1 && (int)error.getValue(i) == 1)
				this.removeRow(i);
		}
	}
	
	/**
	 * Remove the column from the ActivityMatrix with a key as it's identifier.
	 * @param key String representing the key of the vector.
	 * @return vector that was found or null if no vector with key was found.
	 * @throws Exception When the key is not a String.
	 */
	public ComponentVector removeComponent(String key) throws Exception {
		
		for(ComponentVector vector : this.components) {
			String header = vector.getHeader();
			if(header.equals(key)) {
				components.remove(vector);
				return vector;
			}
		}
		
		return null;
	}
	
	/**
	 * Returns the list of components currently added to this matrix.
	 * These are the components that the activity matrix knows about, there
	 * might be more in the system.
	 * @return The list of headers of the components.
	 */
	public ArrayList<String> getComponentHeaders() {
		ArrayList<String> headers = new ArrayList<String>();
		for(ComponentVector vector : this.components)
			headers.add(vector.getHeader());
		return headers;
	}
	
	/**
	 * Get a component if a component exists in the matrix with the header equal
	 * to key.
	 * @param key The header of the component to be retrieved
	 * @return The component vector if it is found.
	 */
	public ComponentVector getComponent(String key) {
		
		for(ComponentVector vector : this.components) {
			String header = vector.getHeader();
			if(header.equals(key)) {
				return vector;
			}
		}
		
		return null;
	}
	
//	public Integer getVectorElement(Object j, int i) throws Exception {
//		return (Integer)this.getComponent(j).getValue(i);
//	}
	
	/**
	 * Remove the row at the index. This means that the values of the component
	 * vectors at the index will be removed. Also the value of the error vector
	 * at this index will be removed.
	 * 
	 * @param index The index of the row that will be removed 
	 * @return A list of the values that were removed during this process (the row).
	 */
	public ArrayList<Object> removeRow(int index) {
		
		ArrayList<Object> return_list = new ArrayList<Object>();
		
		Integer errorValue = error.removeValueAt(index);
		
		for(ComponentVector component : this.components) {
			return_list.add(component.removeValueAt(index));
			component.updateCounts(error);
		}
		
		return_list.add(errorValue);	
		
		return return_list;
	}
	
	/**
	 * Returns the values of the component vector and the error vector at the given
	 * index.
	 * @param index The index of the row that will be retrieved
	 * @return A list of the values at the index (the row)
	 */
	public ArrayList<Object> getRow(int index) {
		
		index++;
		
		ArrayList<Object> return_list = new ArrayList<Object>();
		
		for(ComponentVector component : this.components) {
			return_list.add(component.getValue(index));
		}
		
		return_list.add(error.getValue(index));		
		
		return return_list;
	}

	/** 
	 * Get the amount of components currently known to the activity matrix.
	 * @return The amount of components
	 */
	public int getComponentCount() {
		return this.components.size();		
	}
	
	/**
	 * Returns a proper representation of the activity matrix that is more readable by
	 * the user.
	 * @return The String representation of this matrix.
	 */
	@Override
	public String toString() {
		
		ArrayList<ArrayList<String>> matrix = new ArrayList<ArrayList<String>>();
		ArrayList<String> headers = this.getComponentHeaders();
		headers.add(this.error.getHeader());
		matrix.add(headers);

		int valueCount = this.error.getValues().size();
		ArrayList<String> n11 = new ArrayList<String>();
		ArrayList<String> n10 = new ArrayList<String>();
		ArrayList<String> n01 = new ArrayList<String>();
		ArrayList<String> o = new ArrayList<String>();
		
		for(int k = 0; k < valueCount; k++) {
			matrix.add(new ArrayList<String>());
		}

		for(ComponentVector component : components) {
			for(int i = 1; i <= valueCount; i++) {
				matrix.get(i).add(""+component.getValue(i - 1));
			}
			n11.add(""+component.getCounts().get("n11"));
			n10.add(""+component.getCounts().get("n10"));
			n01.add(""+component.getCounts().get("n01"));
			o.add(""+component.getOchiaiValue());
		}

		for(int i = 1; i <= valueCount; i++) {
			matrix.get(i).add(""+error.getValue(i - 1));
		}
		
		matrix.add(n11);matrix.add(n10);matrix.add(n01);matrix.add(o);
		
		String output = "";
		for(ArrayList<String> string : matrix)
			output += string.toString() +"\n";
		
		return output;
	}
	
	/**
	 * Orders the components by the ochiai value of each component in descending order.
	 * @return The list of headers of the sorted components
	 */
	public ArrayList<String> getRank() {
		
		/* Insertion sort */
		for(int i = 1; i < this.components.size(); i++) {
			ComponentVector v = this.components.get(i);
			for(int k = i - 1; v.getOchiaiValue() < this.components.get(k); k--)
		}
		
		ArrayList<String> rank = new ArrayList<String>();
		
		SortedMap<Double,String> map = new TreeMap<Double,String>();
		
		for(ComponentVector component : this.components) {
			map.put(component.getOchiaiValue(),component.getHeader());
		}

		for(int i = 0; i < map.size(); i++) {
			Double key = (Double) map.keySet().toArray()[i];
			rank.add(0,map.get(key));
		}
		System.out.println(map);
		return rank;
	}

	/**
	 * Return all the components as a list currently known to the activity matrix.
	 * @return A list of ComponentVector
	 */
	public ArrayList<ComponentVector> getComponents() {
		return this.components;
	}

}
