package dev.log.health;

import java.util.ArrayList;
import java.util.HashMap;

public class Function {
	
	private ArrayList<Term> terms;
	private ArrayList<String> components;
	
	public Function(ArrayList<Term> terms) {
		this.terms = terms;
		for(Term term : terms) {
			for(String component : term.getComponents())
				if(!this.components.contains(component))
					this.components.add(component);
		}
	}
	
	public float calculate(HashMap<String,Float> values) {
		
		float result = 1.0f;
		
		for(Term term : terms) {
			result *= term.calculate(values);
		}
		return result;
	}
	
	public float diff(HashMap<String,Float> values, String component) {
		
		float margin = 0.01f;
		float before = calculate(values);
		values.put(component, values.get(component) + margin) ;
		float after = calculate(values);
		
		return (after-before)/margin;
	}

	public float maximize() {
		
		HashMap<String,Float> oldC = new HashMap<String,Float>();
		HashMap<String,Float> newC = new HashMap<String,Float>();
		for(String component : components)
			old.put(component, 0.0f);
		
		float x_new = 0.1f; // algorithm starts at x = 0.5
		float y_new = 0.1f;
		float eps = 0.0001f; // step size
		float precision = 0.000001f;
		
		while(x_new - x_old > precision || y_new - y_old > precision) {
			x_old = x_new;
			y_old = y_new;
			x_new = Math.max(0.0f,x_old + eps * diff(new float[]{x_new,y_new},0));
			y_new = Math.max(0.0f,y_old + eps * diff(new float[]{x_new,y_new},1));
			
		}
		System.out.println(x_new + " and " + y_new);
		return calculate(x_new,y_new);
	}
	
}
