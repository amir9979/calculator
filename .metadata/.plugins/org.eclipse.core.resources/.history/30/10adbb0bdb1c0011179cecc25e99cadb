package dev.log.trace;

import java.util.ArrayList;

import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.jaxen.function.ext.EvaluateFunction;

import dev.log.activity.ComponentVector;
import dev.log.activity.ErrorVector;
import dev.log.activity.Matrix;

public class SpectrumBasedMultipleFaultLocalization {
	
	/**
	 * http://photon.isy.liu.se/dx09/papers/dx09_submission_19.pdf
	 * @input matrix (A,e)
	 * @input number of components M
	 * @input lambda stop criterion
	 * @input L stop criterion
	 */
	
	/**
	 * calculate the spectrum based multiple localization
	 * @throws Exception 
	 */
	public ArrayList<ArrayList<String>> calculate(Matrix matrix, double e) throws Exception {
		 ArrayList<ArrayList<String>> d = Staccato.calculate(matrix, 1.0, 100);
		 
		 for(ArrayList<String> dk : d) {
			 
			 Double expr = generatePr(matrix, dk);
			 
		 }
		 return d;
	}

	private Double generatePr(Matrix matrix,ArrayList<String> dk) {
		
		ErrorVector error = matrix.getError();
		int i = 0;
		Double result = 1.0;
		
		for(Integer eval : error.getValues()){
			for(String dkItem : dk) {
			}
			
			if(eval == 1) {
			
			} 
			i++;
		}
		
		return 0.0;
	}

	/**
	 * @input matrix (A,e)
	 * @input dk
	 */
	public void generatePr(){
		
	}
	
	/**
	 * @input expr
	 * @input (for all j element of dk) gj
	 */
	public void evaluate(){
		
	}
	
	public static void main(String[] args) {
		/**
		 * TEST A MAXIMIZATION
		 */
		System.out.println(gradientMax());
		
	}
	
	public static double gradientMax() {
		double x_old = 0;
		double y_old = 0;
		double x_new = 0.5; // algorithm starts at x = 0.5
		double y_new = 0.5;
		double eps = 1; // step size
		double precision = 0.000001;
		
		while(x_new - x_old > precision || y_new - y_old > precision) {
			x_old = x_new;
			y_old = y_new;
			x_new = x_old + eps * diff(new double[]{x_new,y_new},0);
			y_new = y_old + eps * diff(new double[]{x_new,y_new},1);
		}
		System.out.println(x_new + " and " + y_new);
		return function(x_new,y_new);
		
	}
	
	public static double function(double x1,double x2) {
	  	return (1-x1*x2)*(1-x2)*(1-x1)*x1;
	}
	
	public static double diff(double[] vars, int pos) {
		
		double margin = 0.0001;
		double before = function(vars[0],vars[1]);
		vars[pos] += margin;
		double after = function(vars[0],vars[1]);
		
		return (after-before)/margin;
	}
	
}
